name: Deploy to Server

on:
  push:
    branches:
      - master

permissions:
  contents: read
  deployments: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Check if docker-compose-generator.py has changed
        id: check_changes
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "docker-compose-generator.py"; then
            if ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '[ -f /opt/sharder/docker-compose.yml ]'; then
              echo "Error: docker-compose-generator.py has changed and docker-compose.yml exists on target"
              exit 1
            fi
          fi

      - name: Prepare remote directory
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            'mkdir -p /opt/sharder && touch /opt/sharder/.preserve'

      - name: Sync files
        run: |
          rsync -avz --exclude '.git*' --exclude 'docker-compose.yml' . ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/sharder

      - name: Run live test on temporary instance
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -euo pipefail

            TMP_DIR=/tmp/sharder-$(openssl rand -hex 4)
            cp -r /opt/sharder "$TMP_DIR"

            cd "$TMP_DIR"
            rm docker-compose.yml || true
            python3 docker-compose-generator.py --chunks-per-file 2 --replicas 3 --dev-shards 3
            docker compose up -d --build --remove-orphans

            while ! docker compose ps | grep -q "Up"; do
              echo "Waiting for containers to be up..."
              sleep 1
            done

            echo "Waiting for nginx to become available..."
            for i in {1..20}; do
              if curl --silent --unix-socket "$TMP_DIR/socks/nginx.sock" http://localhost; then
              echo "✅ nginx is up and running"
              break
              else
              echo "⏳ Attempt $i/20: nginx not responding yet..."
              sleep 1
              fi
            done || (echo "❌ nginx failed to start after 20 attempts" && exit 1)

            echo "Running external tests..."
            TEST_EXIT=0
            curl -sS https://bootstrap.pypa.io/get-pip.py | python3
            python3 -m pip install requests-unixsocket
            python3 tests.py || TEST_EXIT=$?

            if [ "$TEST_EXIT" -ne 0 ]; then
              echo "❌ Tests failed. Check logs for details."
              docker compose logs
            fi

            echo "Cleaning up containers and temporary files..."
            docker compose down --remove-orphans || true
            rm -rf "$TMP_DIR" || true

            if [ "$TEST_EXIT" -ne 0 ]; then
              echo "❌ Tests failed. Aborting."
              docker compose logs
              exit 1
            fi

            echo "✅ Tests passed."
          EOF

      - name: Create GitHub Deployment
        uses: actions/github-script@v7
        id: create_deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              required_contexts: [],
              environment: "production",
              auto_merge: false
            });
            return deployment.data.id;

      - name: Update Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.result }},
              state: "in_progress",
              environment: "production"
            });

      - name: Deploy with Docker Compose
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /opt/sharder
            docker compose pull --ignore-pull-failures
            docker compose up -d --build --remove-orphans
          EOF

      - name: Update Deployment Status
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.result }},
              state: "success",
              environment: "production",
              environment_url: "${{ secrets.DEPLOYMENT_URL }}"
            });
